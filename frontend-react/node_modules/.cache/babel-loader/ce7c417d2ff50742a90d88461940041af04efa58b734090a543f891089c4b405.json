{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"tecken\",\n      verb: \"att ha\"\n    },\n    file: {\n      unit: \"bytes\",\n      verb: \"att ha\"\n    },\n    array: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    },\n    set: {\n      unit: \"objekt\",\n      verb: \"att innehålla\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"antal\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"lista\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"reguljärt uttryck\",\n    email: \"e-postadress\",\n    url: \"URL\",\n    emoji: \"emoji\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO-datum och tid\",\n    date: \"ISO-datum\",\n    time: \"ISO-tid\",\n    duration: \"ISO-varaktighet\",\n    ipv4: \"IPv4-intervall\",\n    ipv6: \"IPv6-intervall\",\n    cidrv4: \"IPv4-spektrum\",\n    cidrv6: \"IPv6-spektrum\",\n    base64: \"base64-kodad sträng\",\n    base64url: \"base64url-kodad sträng\",\n    json_string: \"JSON-sträng\",\n    e164: \"E.164-nummer\",\n    jwt: \"JWT\",\n    template_literal: \"mall-literal\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `För stor(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\n          }\n          return `För stor(t): förväntat ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n          }\n          return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return `Ogiltig sträng: måste börja med \"${_issue.prefix}\"`;\n          }\n          if (_issue.format === \"ends_with\") return `Ogiltig sträng: måste sluta med \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Ogiltig sträng: måste innehålla \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Ogiltig sträng: måste matcha mönstret \"${_issue.pattern}\"`;\n          return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `${issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Ogiltig nyckel i ${issue.origin ?? \"värdet\"}`;\n      case \"invalid_union\":\n        return \"Ogiltig input\";\n      case \"invalid_element\":\n        return `Ogiltigt värde i ${issue.origin ?? \"värdet\"}`;\n      default:\n        return `Ogiltig input`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":{"version":3,"names":["util","error","Sizable","string","unit","verb","file","array","set","getSizing","origin","parsedType","data","t","Number","isNaN","Array","isArray","Object","getPrototypeOf","prototype","constructor","name","Nouns","regex","email","url","emoji","uuid","uuidv4","uuidv6","nanoid","guid","cuid","cuid2","ulid","xid","ksuid","datetime","date","time","duration","ipv4","ipv6","cidrv4","cidrv6","base64","base64url","json_string","e164","jwt","template_literal","issue","code","expected","input","values","length","stringifyPrimitive","joinValues","adj","inclusive","sizing","maximum","toString","minimum","_issue","format","prefix","suffix","includes","pattern","divisor","keys","localeError"],"sources":["/Users/thiyagarajankamalakannan/Projects/pathways-ai/frontend-react/node_modules/zod/v4/locales/sv.js"],"sourcesContent":["import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"tecken\", verb: \"att ha\" },\n        file: { unit: \"bytes\", verb: \"att ha\" },\n        array: { unit: \"objekt\", verb: \"att innehålla\" },\n        set: { unit: \"objekt\", verb: \"att innehålla\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"antal\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"lista\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"reguljärt uttryck\",\n        email: \"e-postadress\",\n        url: \"URL\",\n        emoji: \"emoji\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO-datum och tid\",\n        date: \"ISO-datum\",\n        time: \"ISO-tid\",\n        duration: \"ISO-varaktighet\",\n        ipv4: \"IPv4-intervall\",\n        ipv6: \"IPv6-intervall\",\n        cidrv4: \"IPv4-spektrum\",\n        cidrv6: \"IPv6-spektrum\",\n        base64: \"base64-kodad sträng\",\n        base64url: \"base64url-kodad sträng\",\n        json_string: \"JSON-sträng\",\n        e164: \"E.164-nummer\",\n        jwt: \"JWT\",\n        template_literal: \"mall-literal\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Ogiltig inmatning: förväntat ${issue.expected}, fick ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Ogiltig inmatning: förväntat ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Ogiltigt val: förväntade en av ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För stor(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()} ${sizing.unit ?? \"element\"}`;\n                }\n                return `För stor(t): förväntat ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()} ${sizing.unit}`;\n                }\n                return `För lite(t): förväntade ${issue.origin ?? \"värdet\"} att ha ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `Ogiltig sträng: måste börja med \"${_issue.prefix}\"`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `Ogiltig sträng: måste sluta med \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Ogiltig sträng: måste innehålla \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Ogiltig sträng: måste matcha mönstret \"${_issue.pattern}\"`;\n                return `Ogiltig(t) ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Ogiltigt tal: måste vara en multipel av ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `${issue.keys.length > 1 ? \"Okända nycklar\" : \"Okänd nyckel\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Ogiltig nyckel i ${issue.origin ?? \"värdet\"}`;\n            case \"invalid_union\":\n                return \"Ogiltig input\";\n            case \"invalid_element\":\n                return `Ogiltigt värde i ${issue.origin ?? \"värdet\"}`;\n            default:\n                return `Ogiltig input`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}