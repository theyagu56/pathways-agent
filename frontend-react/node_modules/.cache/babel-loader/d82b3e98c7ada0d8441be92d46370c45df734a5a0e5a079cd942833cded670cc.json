{"ast":null,"code":"export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n  constructor() {\n    this._map = new Map();\n    this._idmap = new Map();\n  }\n  add(schema, ..._meta) {\n    const meta = _meta[0];\n    this._map.set(schema, meta);\n    if (meta && typeof meta === \"object\" && \"id\" in meta) {\n      if (this._idmap.has(meta.id)) {\n        throw new Error(`ID ${meta.id} already exists in the registry`);\n      }\n      this._idmap.set(meta.id, schema);\n    }\n    return this;\n  }\n  clear() {\n    this._map = new Map();\n    this._idmap = new Map();\n    return this;\n  }\n  remove(schema) {\n    const meta = this._map.get(schema);\n    if (meta && typeof meta === \"object\" && \"id\" in meta) {\n      this._idmap.delete(meta.id);\n    }\n    this._map.delete(schema);\n    return this;\n  }\n  get(schema) {\n    // return this._map.get(schema) as any;\n    // inherit metadata\n    const p = schema._zod.parent;\n    if (p) {\n      const pm = {\n        ...(this.get(p) ?? {})\n      };\n      delete pm.id; // do not inherit id\n      return {\n        ...pm,\n        ...this._map.get(schema)\n      };\n    }\n    return this._map.get(schema);\n  }\n  has(schema) {\n    return this._map.has(schema);\n  }\n}\n// registries\nexport function registry() {\n  return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/registry();","map":{"version":3,"names":["$output","Symbol","$input","$ZodRegistry","constructor","_map","Map","_idmap","add","schema","_meta","meta","set","has","id","Error","clear","remove","get","delete","p","_zod","parent","pm","registry","globalRegistry"],"sources":["/Users/thiyagarajankamalakannan/Projects/pathways-ai/frontend-react/node_modules/zod/v4/core/registries.js"],"sourcesContent":["export const $output = Symbol(\"ZodOutput\");\nexport const $input = Symbol(\"ZodInput\");\nexport class $ZodRegistry {\n    constructor() {\n        this._map = new Map();\n        this._idmap = new Map();\n    }\n    add(schema, ..._meta) {\n        const meta = _meta[0];\n        this._map.set(schema, meta);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            if (this._idmap.has(meta.id)) {\n                throw new Error(`ID ${meta.id} already exists in the registry`);\n            }\n            this._idmap.set(meta.id, schema);\n        }\n        return this;\n    }\n    clear() {\n        this._map = new Map();\n        this._idmap = new Map();\n        return this;\n    }\n    remove(schema) {\n        const meta = this._map.get(schema);\n        if (meta && typeof meta === \"object\" && \"id\" in meta) {\n            this._idmap.delete(meta.id);\n        }\n        this._map.delete(schema);\n        return this;\n    }\n    get(schema) {\n        // return this._map.get(schema) as any;\n        // inherit metadata\n        const p = schema._zod.parent;\n        if (p) {\n            const pm = { ...(this.get(p) ?? {}) };\n            delete pm.id; // do not inherit id\n            return { ...pm, ...this._map.get(schema) };\n        }\n        return this._map.get(schema);\n    }\n    has(schema) {\n        return this._map.has(schema);\n    }\n}\n// registries\nexport function registry() {\n    return new $ZodRegistry();\n}\nexport const globalRegistry = /*@__PURE__*/ registry();\n"],"mappings":"AAAA,OAAO,MAAMA,OAAO,GAAGC,MAAM,CAAC,WAAW,CAAC;AAC1C,OAAO,MAAMC,MAAM,GAAGD,MAAM,CAAC,UAAU,CAAC;AACxC,OAAO,MAAME,YAAY,CAAC;EACtBC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,IAAID,GAAG,CAAC,CAAC;EAC3B;EACAE,GAAGA,CAACC,MAAM,EAAE,GAAGC,KAAK,EAAE;IAClB,MAAMC,IAAI,GAAGD,KAAK,CAAC,CAAC,CAAC;IACrB,IAAI,CAACL,IAAI,CAACO,GAAG,CAACH,MAAM,EAAEE,IAAI,CAAC;IAC3B,IAAIA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAIA,IAAI,EAAE;MAClD,IAAI,IAAI,CAACJ,MAAM,CAACM,GAAG,CAACF,IAAI,CAACG,EAAE,CAAC,EAAE;QAC1B,MAAM,IAAIC,KAAK,CAAC,MAAMJ,IAAI,CAACG,EAAE,iCAAiC,CAAC;MACnE;MACA,IAAI,CAACP,MAAM,CAACK,GAAG,CAACD,IAAI,CAACG,EAAE,EAAEL,MAAM,CAAC;IACpC;IACA,OAAO,IAAI;EACf;EACAO,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACX,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;IACrB,IAAI,CAACC,MAAM,GAAG,IAAID,GAAG,CAAC,CAAC;IACvB,OAAO,IAAI;EACf;EACAW,MAAMA,CAACR,MAAM,EAAE;IACX,MAAME,IAAI,GAAG,IAAI,CAACN,IAAI,CAACa,GAAG,CAACT,MAAM,CAAC;IAClC,IAAIE,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAIA,IAAI,EAAE;MAClD,IAAI,CAACJ,MAAM,CAACY,MAAM,CAACR,IAAI,CAACG,EAAE,CAAC;IAC/B;IACA,IAAI,CAACT,IAAI,CAACc,MAAM,CAACV,MAAM,CAAC;IACxB,OAAO,IAAI;EACf;EACAS,GAAGA,CAACT,MAAM,EAAE;IACR;IACA;IACA,MAAMW,CAAC,GAAGX,MAAM,CAACY,IAAI,CAACC,MAAM;IAC5B,IAAIF,CAAC,EAAE;MACH,MAAMG,EAAE,GAAG;QAAE,IAAI,IAAI,CAACL,GAAG,CAACE,CAAC,CAAC,IAAI,CAAC,CAAC;MAAE,CAAC;MACrC,OAAOG,EAAE,CAACT,EAAE,CAAC,CAAC;MACd,OAAO;QAAE,GAAGS,EAAE;QAAE,GAAG,IAAI,CAAClB,IAAI,CAACa,GAAG,CAACT,MAAM;MAAE,CAAC;IAC9C;IACA,OAAO,IAAI,CAACJ,IAAI,CAACa,GAAG,CAACT,MAAM,CAAC;EAChC;EACAI,GAAGA,CAACJ,MAAM,EAAE;IACR,OAAO,IAAI,CAACJ,IAAI,CAACQ,GAAG,CAACJ,MAAM,CAAC;EAChC;AACJ;AACA;AACA,OAAO,SAASe,QAAQA,CAAA,EAAG;EACvB,OAAO,IAAIrB,YAAY,CAAC,CAAC;AAC7B;AACA,OAAO,MAAMsB,cAAc,GAAG,aAAcD,QAAQ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}