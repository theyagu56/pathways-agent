{"ast":null,"code":"import * as util from \"../core/util.js\";\nfunction getRussianPlural(count, one, few, many) {\n  const absCount = Math.abs(count);\n  const lastDigit = absCount % 10;\n  const lastTwoDigits = absCount % 100;\n  if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n    return many;\n  }\n  if (lastDigit === 1) {\n    return one;\n  }\n  if (lastDigit >= 2 && lastDigit <= 4) {\n    return few;\n  }\n  return many;\n}\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: {\n        one: \"символ\",\n        few: \"символа\",\n        many: \"символов\"\n      },\n      verb: \"иметь\"\n    },\n    file: {\n      unit: {\n        one: \"байт\",\n        few: \"байта\",\n        many: \"байт\"\n      },\n      verb: \"иметь\"\n    },\n    array: {\n      unit: {\n        one: \"элемент\",\n        few: \"элемента\",\n        many: \"элементов\"\n      },\n      verb: \"иметь\"\n    },\n    set: {\n      unit: {\n        one: \"элемент\",\n        few: \"элемента\",\n        many: \"элементов\"\n      },\n      verb: \"иметь\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"число\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"массив\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"ввод\",\n    email: \"email адрес\",\n    url: \"URL\",\n    emoji: \"эмодзи\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO дата и время\",\n    date: \"ISO дата\",\n    time: \"ISO время\",\n    duration: \"ISO длительность\",\n    ipv4: \"IPv4 адрес\",\n    ipv6: \"IPv6 адрес\",\n    cidrv4: \"IPv4 диапазон\",\n    cidrv6: \"IPv6 диапазон\",\n    base64: \"строка в формате base64\",\n    base64url: \"строка в формате base64url\",\n    json_string: \"JSON строка\",\n    e164: \"номер E.164\",\n    jwt: \"JWT\",\n    template_literal: \"ввод\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `Неверный ввод: ожидалось ${issue.expected}, получено ${parsedType(issue.input)}`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `Неверный ввод: ожидалось ${util.stringifyPrimitive(issue.values[0])}`;\n        return `Неверный вариант: ожидалось одно из ${util.joinValues(issue.values, \"|\")}`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"<=\" : \"<\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const maxValue = Number(issue.maximum);\n            const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет иметь ${adj}${issue.maximum.toString()} ${unit}`;\n          }\n          return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет ${adj}${issue.maximum.toString()}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \">=\" : \">\";\n          const sizing = getSizing(issue.origin);\n          if (sizing) {\n            const minValue = Number(issue.minimum);\n            const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n            return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет иметь ${adj}${issue.minimum.toString()} ${unit}`;\n          }\n          return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет ${adj}${issue.minimum.toString()}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") return `Неверная строка: должна начинаться с \"${_issue.prefix}\"`;\n          if (_issue.format === \"ends_with\") return `Неверная строка: должна заканчиваться на \"${_issue.suffix}\"`;\n          if (_issue.format === \"includes\") return `Неверная строка: должна содержать \"${_issue.includes}\"`;\n          if (_issue.format === \"regex\") return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;\n          return `Неверный ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `Неверное число: должно быть кратным ${issue.divisor}`;\n      case \"unrecognized_keys\":\n        return `Нераспознанн${issue.keys.length > 1 ? \"ые\" : \"ый\"} ключ${issue.keys.length > 1 ? \"и\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `Неверный ключ в ${issue.origin}`;\n      case \"invalid_union\":\n        return \"Неверные входные данные\";\n      case \"invalid_element\":\n        return `Неверное значение в ${issue.origin}`;\n      default:\n        return `Неверные входные данные`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":{"version":3,"names":["util","getRussianPlural","count","one","few","many","absCount","Math","abs","lastDigit","lastTwoDigits","error","Sizable","string","unit","verb","file","array","set","getSizing","origin","parsedType","data","t","Number","isNaN","Array","isArray","Object","getPrototypeOf","prototype","constructor","name","Nouns","regex","email","url","emoji","uuid","uuidv4","uuidv6","nanoid","guid","cuid","cuid2","ulid","xid","ksuid","datetime","date","time","duration","ipv4","ipv6","cidrv4","cidrv6","base64","base64url","json_string","e164","jwt","template_literal","issue","code","expected","input","values","length","stringifyPrimitive","joinValues","adj","inclusive","sizing","maxValue","maximum","toString","minValue","minimum","_issue","format","prefix","suffix","includes","pattern","divisor","keys","localeError"],"sources":["/Users/thiyagarajankamalakannan/Projects/pathways-ai/frontend-react/node_modules/zod/v4/locales/ru.js"],"sourcesContent":["import * as util from \"../core/util.js\";\nfunction getRussianPlural(count, one, few, many) {\n    const absCount = Math.abs(count);\n    const lastDigit = absCount % 10;\n    const lastTwoDigits = absCount % 100;\n    if (lastTwoDigits >= 11 && lastTwoDigits <= 19) {\n        return many;\n    }\n    if (lastDigit === 1) {\n        return one;\n    }\n    if (lastDigit >= 2 && lastDigit <= 4) {\n        return few;\n    }\n    return many;\n}\nconst error = () => {\n    const Sizable = {\n        string: {\n            unit: {\n                one: \"символ\",\n                few: \"символа\",\n                many: \"символов\",\n            },\n            verb: \"иметь\",\n        },\n        file: {\n            unit: {\n                one: \"байт\",\n                few: \"байта\",\n                many: \"байт\",\n            },\n            verb: \"иметь\",\n        },\n        array: {\n            unit: {\n                one: \"элемент\",\n                few: \"элемента\",\n                many: \"элементов\",\n            },\n            verb: \"иметь\",\n        },\n        set: {\n            unit: {\n                one: \"элемент\",\n                few: \"элемента\",\n                many: \"элементов\",\n            },\n            verb: \"иметь\",\n        },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"число\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"массив\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"ввод\",\n        email: \"email адрес\",\n        url: \"URL\",\n        emoji: \"эмодзи\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO дата и время\",\n        date: \"ISO дата\",\n        time: \"ISO время\",\n        duration: \"ISO длительность\",\n        ipv4: \"IPv4 адрес\",\n        ipv6: \"IPv6 адрес\",\n        cidrv4: \"IPv4 диапазон\",\n        cidrv6: \"IPv6 диапазон\",\n        base64: \"строка в формате base64\",\n        base64url: \"строка в формате base64url\",\n        json_string: \"JSON строка\",\n        e164: \"номер E.164\",\n        jwt: \"JWT\",\n        template_literal: \"ввод\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `Неверный ввод: ожидалось ${issue.expected}, получено ${parsedType(issue.input)}`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `Неверный ввод: ожидалось ${util.stringifyPrimitive(issue.values[0])}`;\n                return `Неверный вариант: ожидалось одно из ${util.joinValues(issue.values, \"|\")}`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"<=\" : \"<\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const maxValue = Number(issue.maximum);\n                    const unit = getRussianPlural(maxValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет иметь ${adj}${issue.maximum.toString()} ${unit}`;\n                }\n                return `Слишком большое значение: ожидалось, что ${issue.origin ?? \"значение\"} будет ${adj}${issue.maximum.toString()}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \">=\" : \">\";\n                const sizing = getSizing(issue.origin);\n                if (sizing) {\n                    const minValue = Number(issue.minimum);\n                    const unit = getRussianPlural(minValue, sizing.unit.one, sizing.unit.few, sizing.unit.many);\n                    return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет иметь ${adj}${issue.minimum.toString()} ${unit}`;\n                }\n                return `Слишком маленькое значение: ожидалось, что ${issue.origin} будет ${adj}${issue.minimum.toString()}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\")\n                    return `Неверная строка: должна начинаться с \"${_issue.prefix}\"`;\n                if (_issue.format === \"ends_with\")\n                    return `Неверная строка: должна заканчиваться на \"${_issue.suffix}\"`;\n                if (_issue.format === \"includes\")\n                    return `Неверная строка: должна содержать \"${_issue.includes}\"`;\n                if (_issue.format === \"regex\")\n                    return `Неверная строка: должна соответствовать шаблону ${_issue.pattern}`;\n                return `Неверный ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `Неверное число: должно быть кратным ${issue.divisor}`;\n            case \"unrecognized_keys\":\n                return `Нераспознанн${issue.keys.length > 1 ? \"ые\" : \"ый\"} ключ${issue.keys.length > 1 ? \"и\" : \"\"}: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `Неверный ключ в ${issue.origin}`;\n            case \"invalid_union\":\n                return \"Неверные входные данные\";\n            case \"invalid_element\":\n                return `Неверное значение в ${issue.origin}`;\n            default:\n                return `Неверные входные данные`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}