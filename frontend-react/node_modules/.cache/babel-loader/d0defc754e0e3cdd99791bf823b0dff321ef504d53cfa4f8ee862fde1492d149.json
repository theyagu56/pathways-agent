{"ast":null,"code":"import * as util from \"../core/util.js\";\nconst error = () => {\n  const Sizable = {\n    string: {\n      unit: \"문자\",\n      verb: \"to have\"\n    },\n    file: {\n      unit: \"바이트\",\n      verb: \"to have\"\n    },\n    array: {\n      unit: \"개\",\n      verb: \"to have\"\n    },\n    set: {\n      unit: \"개\",\n      verb: \"to have\"\n    }\n  };\n  function getSizing(origin) {\n    return Sizable[origin] ?? null;\n  }\n  const parsedType = data => {\n    const t = typeof data;\n    switch (t) {\n      case \"number\":\n        {\n          return Number.isNaN(data) ? \"NaN\" : \"number\";\n        }\n      case \"object\":\n        {\n          if (Array.isArray(data)) {\n            return \"array\";\n          }\n          if (data === null) {\n            return \"null\";\n          }\n          if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n            return data.constructor.name;\n          }\n        }\n    }\n    return t;\n  };\n  const Nouns = {\n    regex: \"입력\",\n    email: \"이메일 주소\",\n    url: \"URL\",\n    emoji: \"이모지\",\n    uuid: \"UUID\",\n    uuidv4: \"UUIDv4\",\n    uuidv6: \"UUIDv6\",\n    nanoid: \"nanoid\",\n    guid: \"GUID\",\n    cuid: \"cuid\",\n    cuid2: \"cuid2\",\n    ulid: \"ULID\",\n    xid: \"XID\",\n    ksuid: \"KSUID\",\n    datetime: \"ISO 날짜시간\",\n    date: \"ISO 날짜\",\n    time: \"ISO 시간\",\n    duration: \"ISO 기간\",\n    ipv4: \"IPv4 주소\",\n    ipv6: \"IPv6 주소\",\n    cidrv4: \"IPv4 범위\",\n    cidrv6: \"IPv6 범위\",\n    base64: \"base64 인코딩 문자열\",\n    base64url: \"base64url 인코딩 문자열\",\n    json_string: \"JSON 문자열\",\n    e164: \"E.164 번호\",\n    jwt: \"JWT\",\n    template_literal: \"입력\"\n  };\n  return issue => {\n    switch (issue.code) {\n      case \"invalid_type\":\n        return `잘못된 입력: 예상 타입은 ${issue.expected}, 받은 타입은 ${parsedType(issue.input)}입니다`;\n      case \"invalid_value\":\n        if (issue.values.length === 1) return `잘못된 입력: 값은 ${util.stringifyPrimitive(issue.values[0])} 이어야 합니다`;\n        return `잘못된 옵션: ${util.joinValues(issue.values, \"또는 \")} 중 하나여야 합니다`;\n      case \"too_big\":\n        {\n          const adj = issue.inclusive ? \"이하\" : \"미만\";\n          const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = sizing?.unit ?? \"요소\";\n          if (sizing) return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;\n          return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()} ${adj}${suffix}`;\n        }\n      case \"too_small\":\n        {\n          const adj = issue.inclusive ? \"이상\" : \"초과\";\n          const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\n          const sizing = getSizing(issue.origin);\n          const unit = sizing?.unit ?? \"요소\";\n          if (sizing) {\n            return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;\n          }\n          return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()} ${adj}${suffix}`;\n        }\n      case \"invalid_format\":\n        {\n          const _issue = issue;\n          if (_issue.format === \"starts_with\") {\n            return `잘못된 문자열: \"${_issue.prefix}\"(으)로 시작해야 합니다`;\n          }\n          if (_issue.format === \"ends_with\") return `잘못된 문자열: \"${_issue.suffix}\"(으)로 끝나야 합니다`;\n          if (_issue.format === \"includes\") return `잘못된 문자열: \"${_issue.includes}\"을(를) 포함해야 합니다`;\n          if (_issue.format === \"regex\") return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;\n          return `잘못된 ${Nouns[_issue.format] ?? issue.format}`;\n        }\n      case \"not_multiple_of\":\n        return `잘못된 숫자: ${issue.divisor}의 배수여야 합니다`;\n      case \"unrecognized_keys\":\n        return `인식할 수 없는 키: ${util.joinValues(issue.keys, \", \")}`;\n      case \"invalid_key\":\n        return `잘못된 키: ${issue.origin}`;\n      case \"invalid_union\":\n        return `잘못된 입력`;\n      case \"invalid_element\":\n        return `잘못된 값: ${issue.origin}`;\n      default:\n        return `잘못된 입력`;\n    }\n  };\n};\nexport default function () {\n  return {\n    localeError: error()\n  };\n}","map":{"version":3,"names":["util","error","Sizable","string","unit","verb","file","array","set","getSizing","origin","parsedType","data","t","Number","isNaN","Array","isArray","Object","getPrototypeOf","prototype","constructor","name","Nouns","regex","email","url","emoji","uuid","uuidv4","uuidv6","nanoid","guid","cuid","cuid2","ulid","xid","ksuid","datetime","date","time","duration","ipv4","ipv6","cidrv4","cidrv6","base64","base64url","json_string","e164","jwt","template_literal","issue","code","expected","input","values","length","stringifyPrimitive","joinValues","adj","inclusive","suffix","sizing","maximum","toString","minimum","_issue","format","prefix","includes","pattern","divisor","keys","localeError"],"sources":["/Users/thiyagarajankamalakannan/Projects/pathways-ai/frontend-react/node_modules/zod/v4/locales/ko.js"],"sourcesContent":["import * as util from \"../core/util.js\";\nconst error = () => {\n    const Sizable = {\n        string: { unit: \"문자\", verb: \"to have\" },\n        file: { unit: \"바이트\", verb: \"to have\" },\n        array: { unit: \"개\", verb: \"to have\" },\n        set: { unit: \"개\", verb: \"to have\" },\n    };\n    function getSizing(origin) {\n        return Sizable[origin] ?? null;\n    }\n    const parsedType = (data) => {\n        const t = typeof data;\n        switch (t) {\n            case \"number\": {\n                return Number.isNaN(data) ? \"NaN\" : \"number\";\n            }\n            case \"object\": {\n                if (Array.isArray(data)) {\n                    return \"array\";\n                }\n                if (data === null) {\n                    return \"null\";\n                }\n                if (Object.getPrototypeOf(data) !== Object.prototype && data.constructor) {\n                    return data.constructor.name;\n                }\n            }\n        }\n        return t;\n    };\n    const Nouns = {\n        regex: \"입력\",\n        email: \"이메일 주소\",\n        url: \"URL\",\n        emoji: \"이모지\",\n        uuid: \"UUID\",\n        uuidv4: \"UUIDv4\",\n        uuidv6: \"UUIDv6\",\n        nanoid: \"nanoid\",\n        guid: \"GUID\",\n        cuid: \"cuid\",\n        cuid2: \"cuid2\",\n        ulid: \"ULID\",\n        xid: \"XID\",\n        ksuid: \"KSUID\",\n        datetime: \"ISO 날짜시간\",\n        date: \"ISO 날짜\",\n        time: \"ISO 시간\",\n        duration: \"ISO 기간\",\n        ipv4: \"IPv4 주소\",\n        ipv6: \"IPv6 주소\",\n        cidrv4: \"IPv4 범위\",\n        cidrv6: \"IPv6 범위\",\n        base64: \"base64 인코딩 문자열\",\n        base64url: \"base64url 인코딩 문자열\",\n        json_string: \"JSON 문자열\",\n        e164: \"E.164 번호\",\n        jwt: \"JWT\",\n        template_literal: \"입력\",\n    };\n    return (issue) => {\n        switch (issue.code) {\n            case \"invalid_type\":\n                return `잘못된 입력: 예상 타입은 ${issue.expected}, 받은 타입은 ${parsedType(issue.input)}입니다`;\n            case \"invalid_value\":\n                if (issue.values.length === 1)\n                    return `잘못된 입력: 값은 ${util.stringifyPrimitive(issue.values[0])} 이어야 합니다`;\n                return `잘못된 옵션: ${util.joinValues(issue.values, \"또는 \")} 중 하나여야 합니다`;\n            case \"too_big\": {\n                const adj = issue.inclusive ? \"이하\" : \"미만\";\n                const suffix = adj === \"미만\" ? \"이어야 합니다\" : \"여야 합니다\";\n                const sizing = getSizing(issue.origin);\n                const unit = sizing?.unit ?? \"요소\";\n                if (sizing)\n                    return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()}${unit} ${adj}${suffix}`;\n                return `${issue.origin ?? \"값\"}이 너무 큽니다: ${issue.maximum.toString()} ${adj}${suffix}`;\n            }\n            case \"too_small\": {\n                const adj = issue.inclusive ? \"이상\" : \"초과\";\n                const suffix = adj === \"이상\" ? \"이어야 합니다\" : \"여야 합니다\";\n                const sizing = getSizing(issue.origin);\n                const unit = sizing?.unit ?? \"요소\";\n                if (sizing) {\n                    return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()}${unit} ${adj}${suffix}`;\n                }\n                return `${issue.origin ?? \"값\"}이 너무 작습니다: ${issue.minimum.toString()} ${adj}${suffix}`;\n            }\n            case \"invalid_format\": {\n                const _issue = issue;\n                if (_issue.format === \"starts_with\") {\n                    return `잘못된 문자열: \"${_issue.prefix}\"(으)로 시작해야 합니다`;\n                }\n                if (_issue.format === \"ends_with\")\n                    return `잘못된 문자열: \"${_issue.suffix}\"(으)로 끝나야 합니다`;\n                if (_issue.format === \"includes\")\n                    return `잘못된 문자열: \"${_issue.includes}\"을(를) 포함해야 합니다`;\n                if (_issue.format === \"regex\")\n                    return `잘못된 문자열: 정규식 ${_issue.pattern} 패턴과 일치해야 합니다`;\n                return `잘못된 ${Nouns[_issue.format] ?? issue.format}`;\n            }\n            case \"not_multiple_of\":\n                return `잘못된 숫자: ${issue.divisor}의 배수여야 합니다`;\n            case \"unrecognized_keys\":\n                return `인식할 수 없는 키: ${util.joinValues(issue.keys, \", \")}`;\n            case \"invalid_key\":\n                return `잘못된 키: ${issue.origin}`;\n            case \"invalid_union\":\n                return `잘못된 입력`;\n            case \"invalid_element\":\n                return `잘못된 값: ${issue.origin}`;\n            default:\n                return `잘못된 입력`;\n        }\n    };\n};\nexport default function () {\n    return {\n        localeError: error(),\n    };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}